#' @title Fine-Gray Competing Risks Regression
#' @name LearnerCompRisksFineGrayCRR
#' @templateVar id cmprsk.crr
#' @template learner
#' @templateVar caller [cmprsk::crr()]
#' @templateVar predict_method [cmprsk::predict.crr()]
#'
#' @description
#' A learner for Fine-Gray competing risks regression, implemented via [cmprsk::crr()]
#' within the mlr3proba framework. This learner estimates cumulative incidence functions
#' (CIFs) for competing risks scenarios with multiple mutually exclusive events.
#' It supports fixed and time-varying covariates through a user-defined transformation
#' function. Models are fitted for each event type specified in the task's `cmp_events`,
#' with censoring coded as 0 in the task's `status` column. Predictions provide CIFs
#' for all event types across unique event times from training data.
#'
#' @param cov2_info `list()` \cr
#' Optional configuration for time-varying covariates. If `NULL` (default), all covariates
#' are treated as fixed. The list must contain:
#' \describe{
#'   \item{cov2nms}{`character()` \cr Names of covariates from the task's feature set to treat as time-varying.}
#'   \item{tf}{`function(uft)` \cr Function specifying time-varying effects, taking a numeric vector `uft` (unique failure times) and returning a matrix with `nrow = length(uft)` and `ncol` matching the columns of the `cov2` matrix derived from `cov2nms`. Example: `function(uft) log(uft)`.}
#'   \item{cov2only}{`character()` or `NULL` \cr Covariate names used only for `cov2` and excluded from fixed covariates (`cov1`). Must be a subset of `cov2nms`. If `NULL` (default), all task features contribute to `cov1`.}
#' }
#'
#' @section Methods:
#' \describe{
#'   \item{`convergence()`}{Returns a named list indicating convergence status for each event model (`TRUE`/`FALSE`).}
#'   \item{`importance()`}{Returns a data frame with coefficient-based variable importance for each event, scaled by absolute coefficient sums.}
#' }
#'
#' @section Parameter Set:
#' \describe{
#'   \item{maxiter}{`integer(1)` \cr Maximum number of iterations for model fitting. Default: 100.}
#'   \item{gtol}{`numeric(1)` \cr Convergence tolerance for gradient. Default: 1e-6.}
#'   \item{parallel}{`logical(1)` \cr Enable parallel model fitting with `future.apply`. Default: `FALSE`.}
#' }
#'
#' @note
#' - Time-varying covariates require careful specification of the `tf` function to match the dimensions of `cov2`.
#' - The learner assumes no missing values in covariates; NAs will cause errors.
#' - Parallel execution requires the `future.apply` package.
#'
#' @references
#' \bibentry{
#'   author = {Jason P. Fine and Robert J. Gray},
#'   title = {A Proportional Hazards Model for the Subdistribution of a Competing Risk},
#'   journal = {Journal of the American Statistical Association},
#'   year = {1999},
#'   volume = {94},
#'   number = {446},
#'   pages = {496--509},
#'   doi = {10.1080/01621459.1999.10474144}
#' }
#'
#' @examples
#' \dontrun{
#' library(mlr3)
#' library(mlr3proba)
#' task <- tsk("pbc")
#' task$select(c("age", "bili", "sex"))
#' learner <- lrn("cmprsk.crr",
#'   cov2_info = list(
#'     cov2nms = c("age", "sex"),
#'     tf = function(uft) cbind(log(uft), log(uft + 1)),
#'     cov2only = "sex"
#'   ),
#'   maxiter = 100,
#'   gtol = 1e-6,
#'   parallel = FALSE
#' )
#' learner$train(task)
#' pred <- learner$predict(task)
#' print(pred)
#' learner$convergence()
#' learner$importance()
#' }
#'
#' @export
LearnerCompRisksFineGrayCRR <- R6::R6Class("LearnerCompRisksFineGrayCRR",
  inherit = mlr3proba::LearnerCompRisks,
  public = list(
    #' @description
    #' Creates a new instance of this [R6][R6::R6Class] class.
    #'
    #' @param cov2_info `list()` \cr
    #' Optional configuration for time-varying covariates. See class description for details.
    initialize = function(cov2_info = NULL) {
      checkmate::assert_list(cov2_info, null.ok = TRUE, .var.name = "cov2_info")
      if (!is.null(cov2_info)) {
        checkmate::assert_subset(c("cov2nms", "tf"), names(cov2_info), .var.name = "cov2_info")
        checkmate::assert_character(cov2_info$cov2nms, min.len = 1, .var.name = "cov2nms")
        checkmate::assert_function(cov2_info$tf, .var.name = "tf")
        if (!is.null(cov2_info$cov2only)) {
          checkmate::assert_character(cov2_info$cov2only, .var.name = "cov2only")
          checkmate::assert_subset(cov2_info$cov2only, cov2_info$cov2nms, .var.name = "cov2only")
        }
      }
      private$cov2_info <- cov2_info

      ps <- paradox::ps(
        maxiter = paradox::p_int(default = 100L, lower = 1L, upper = 1000L, tags = "train"),
        gtol = paradox::p_dbl(default = 1e-6, lower = 1e-9, upper = 1e-3, tags = "train"),
        parallel = paradox::p_lgl(default = FALSE, tags = "train")
      )
      ps$values <- list(maxiter = 100L, gtol = 1e-6, parallel = FALSE)

      super$initialize(
        id = "cmprsk.crr",
        param_set = ps,
        feature_types = c("logical", "integer", "numeric", "factor"),
        predict_types = c("cif"),
        packages = c("mlr3proba", "cmprsk", "paradox", "future.apply"),
        properties = c("importance", "missings"),
        label = "Fine-Gray Competing Risks Regression",
        man = "mlr3extralearners::mlr_learners_cmprsk.crr"
      )
    },

    #' @description
    #' Returns convergence status for each event model.
    #' @return Named list with `TRUE`/`FALSE` for each event.
    convergence = function() {
      checkmate::assert(!is.null(self$state$convergence), "Model has not been trained yet")
      self$state$convergence
    },

    #' @description
    #' Returns coefficient-based variable importance for each event.
    #' @return Data frame with columns: `variable`, `importance`, `event`.
    importance = function() {
      checkmate::assert(!is.null(self$state$model), "Model has not been trained yet")
      importance <- lapply(names(self$state$model), function(event) {
        coefs <- self$state$model[[event]]$coef
        abs_coefs <- abs(coefs)
        sum_coefs <- sum(abs_coefs, na.rm = TRUE)
        if (sum_coefs == 0) sum_coefs <- 1
        data.frame(
          variable = names(coefs),
          importance = abs_coefs / sum_coefs,
          event = event,
          stringsAsFactors = FALSE
        )
      })
      do.call(rbind, importance)
    }
  ),

  private = list(
    cov2_info = NULL,

    .train = function(task, row_ids = task$row_ids) {
      checkmate::assert_task(task, .var.name = "task")
      checkmate::assert_subset(row_ids, task$row_ids, .var.name = "row_ids")
      pv <- self$param_set$get_values(tags = "train")
      full_data <- task$data(rows = row_ids)
      features <- task$feature_names
      time_col <- task$target_names[1]
      event_col <- task$target_names[2]
      checkmate::assert_numeric(full_data[[time_col]], .var.name = time_col)
      checkmate::assert_factor(full_data[[event_col]], .var.name = event_col)

      if (is.null(private$cov2_info) || is.null(private$cov2_info$cov2only)) {
        cov1_features <- features
      } else {
        cov1_features <- setdiff(features, private$cov2_info$cov2only)
      }
      if (length(cov1_features) > 0) {
        formula <- as.formula(paste("~", paste(cov1_features, collapse = " + ")))
        cov1 <- model.matrix(formula, data = full_data)[, -1, drop = FALSE]
        checkmate::assert_matrix(cov1, any.missing = FALSE, .var.name = "cov1")
        self$state$cov1_formula <- formula
      } else {
        cov1 <- NULL
        self$state$cov1_formula <- NULL
      }

      if (!is.null(private$cov2_info)) {
        cov2nms <- private$cov2_info$cov2nms
        tf <- private$cov2_info$tf
        checkmate::assert_subset(cov2nms, features, .var.name = "cov2nms")
        cov2_formulas <- lapply(cov2nms, function(nm) as.formula(paste("~", nm)))
        cov2_list <- lapply(cov2_formulas, function(f) {
          model.matrix(f, data = full_data)[, -1, drop = FALSE]
        })
        cov2 <- do.call(cbind, cov2_list)
        if (ncol(cov2) == 1) cov2 <- as.vector(cov2)
        checkmate::assert_matrix(cov2, any.missing = FALSE, .var.name = "cov2")
        uft <- unique(as.numeric(full_data[[time_col]]))
        tf_out <- tf(uft)
        checkmate::assert_matrix(tf_out, nrows = length(uft), ncols = ncol(as.matrix(cov2)), .var.name = "tf_out")
        tf_final <- tf
        self$state$cov2_formulas <- cov2_formulas
      } else {
        cov2 <- NULL
        tf_final <- NULL
        self$state$cov2_formulas <- NULL
      }

      ftime <- as.numeric(full_data[[time_col]])
      all_event_times <- sort(unique(ftime))
      event_levels <- as.character(task$cmp_events)
      fstatus <- as.numeric(full_data[[event_col]])

      fit_model <- function(target_event, ftime, fstatus, cov1, cov2, tf_final, pv) {
        args <- list(
          ftime = ftime,
          fstatus = fstatus,
          cov1 = cov1,
          cov2 = cov2,
          tf = tf_final,
          failcode = as.integer(target_event),
          cencode = 0L,
          maxiter = pv$maxiter,
          gtol = pv$gtol
        )
        args <- args[!sapply(args, is.null)]
        tryCatch(
          mlr3misc::invoke(cmprsk::crr, .args = args),
          warning = function(w) {
            warning(sprintf("Convergence warning for event %s: %s", target_event, w$message))
            return(NULL)
          },
          error = function(e) {
            stop(sprintf("Failed to train model for event %s: %s", target_event, e$message))
          }
        )
      }

      if (pv$parallel) {
        checkmate::assert_package("future.apply")
        models <- future.apply::future_lapply(
          event_levels, fit_model,
          ftime = ftime, fstatus = fstatus, cov1 = cov1, cov2 = cov2, tf_final = tf_final, pv = pv,
          future.seed = TRUE
        )
      } else {
        models <- lapply(
          event_levels, fit_model,
          ftime = ftime, fstatus = fstatus, cov1 = cov1, cov2 = cov2, tf_final = tf_final, pv = pv
        )
      }
      names(models) <- event_levels

      convergence <- list()
      event_times <- list()
      for (event in event_levels) {
        convergence[[event]] <- !is.null(models[[event]])
        event_times[[event]] <- if (!is.null(models[[event]])) models[[event]]$uftime else NULL
      }

      self$state$model <- models
      self$state$convergence <- convergence
      self$state$event_times <- event_times
      self$state$cov2 <- cov2
      self$state$tf <- tf_final
      self$state$feature_names <- features
      self$state$cov2_names <- if (!is.null(cov2)) colnames(as.matrix(cov2)) else NULL
      self$state$all_event_times <- all_event_times

      models
    },

    .predict = function(task, row_ids = task$row_ids) {
      checkmate::assert_task(task, .var.name = "task")
      checkmate::assert_subset(row_ids, task$row_ids, .var.name = "row_ids")
      newdata <- task$data(rows = row_ids)
      event_levels <- as.character(task$cmp_events)
      cif_list <- vector("list", length(event_levels))
      names(cif_list) <- event_levels

      if (!is.null(self$state$cov1_formula)) {
        cov1 <- model.matrix(self$state$cov1_formula, data = newdata)[, -1, drop = FALSE]
        checkmate::assert_matrix(cov1, any.missing = FALSE, .var.name = "cov1")
      } else {
        cov1 <- NULL
      }

      if (!is.null(self$state$cov2_formulas)) {
        cov2_list <- lapply(self$state$cov2_formulas, function(f) {
          model.matrix(f, data = newdata)[, -1, drop = FALSE]
        })
        cov2 <- do.call(cbind, cov2_list)
        if (ncol(cov2) == 1) cov2 <- as.vector(cov2)
        checkmate::assert_matrix(cov2, any.missing = FALSE, .var.name = "cov2")
        tf <- self$state$tf
      } else {
        cov2 <- NULL
        tf <- NULL
      }

      all_times <- self$state$all_event_times
      all_times_char <- as.character(all_times)

      for (event in event_levels) {
        model <- self$state$model[[event]]
        checkmate::assert(!is.null(model), sprintf("No model available for event %s", event))
        pred <- tryCatch({
          pred_raw <- predict(model, cov1 = cov1, cov2 = cov2, tf = tf, time = all_times)
          pred_times <- pred_raw[, 1]
          pred_cif <- t(pred_raw[, -1, drop = FALSE])
          n_times <- length(all_times)
          if (ncol(pred_cif) != n_times) {
            full_cif <- matrix(0, nrow = nrow(pred_cif), ncol = n_times)
            colnames(full_cif) <- all_times_char
            time_idx <- match(pred_times, all_times)
            checkmate::assert(all(!is.na(time_idx)), "Predicted times do not match training times")
            for (i in seq_len(nrow(pred_cif))) {
              for (j in seq_len(ncol(pred_cif))) {
                full_cif[i, time_idx[j]:n_times] <- pred_cif[i, j]
              }
            }
            pred_cif <- full_cif
          }
          colnames(pred_cif) <- all_times_char
          rownames(pred_cif) <- NULL
          pred_cif
        }, error = function(e) {
          stop(sprintf("Failed to predict for event %s: %s", event, e$message))
        })
        cif_list[[event]] <- pred
      }

      mlr3proba::PredictionCompRisk$new(task = task, cif = cif_list)
    }
  )
)

#' @importFrom mlr3misc register_learner
mlr3misc::register_learner("cmprsk.crr", LearnerCompRisksFineGrayCRR, pkg = "mlr3extralearners")